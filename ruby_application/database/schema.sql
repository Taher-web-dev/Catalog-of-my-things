CREATE DATABASE catalog_of_things;

-- Create Author table
DROP TABLE IF EXISTS Author;
CREATE TABLE Author(
  id INT GENERATED ALWAYS AS IDENTITY,
  first_name VARCHAR(100),
  last_name VARCHAR(100),
  PRIMARY KEY(id)
);
-- Create Item Table
DROP TABLE IF EXISTS Item;
CREATE TABLE Item(
  id INT GENERATED ALWAYS AS IDENTITY,
  publish_date date,
  archived boolean,
  author_id INT,
  PRIMARY KEY(id),
  CONSTRAINT fkey_author
    FOREIGN KEY (author_id)
      REFERENCES Author(id)
      ON DELETE SET NULL
);
-- Ensure move_to_archive method for item table
UPDATE ITEM
SET archived = TRUE
WHERE (SELECT(CURRENT_DATE - publish_date) AS YEARS) > 10;
--Create Game table
DROP TABLE IF EXISTS Game;
CREATE TABLE Game(
  id INT GENERATED ALWAYS AS IDENTITY,
  publish_date date,
  archived boolean,
  author_id INT,
  multiplayer VARCHAR(100),
  last_played_at date,
  CONSTRAINT fkey_author
    FOREIGN KEY(author_id)
      REFERENCES Author(id)
      ON DELETE SET NULL
);
-- Ensure move_to_archive method for Game table
UPDATE Game
SET archived = TRUE
WHERE ((SELECT(CURRENT_DATE - publish_date) AS YEARS) > 10) AND ((SELECT(CURRENT_DATE - last_played_at)AS YEARS) >2)
;


	CREATE TABLE Label(
    id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title   VARCHAR(50),
    color   VARCHAR(50)
    );

CREATE TABLE Genre(
    id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(50)
    );

CREATE TABLE Book(
  id            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  genre_id      INTEGER,
  author_id     INTEGER,
  label_id      INTEGER,
  publish_date  DATE,
  archived      BOOLEAN,
  publisher     VARCHAR(50),
  cover_state   VARCHAR(10),

  FOREIGN KEY (genre_id)  REFERENCES Genre(id)
  FOREIGN KEY (author_id) REFERENCES Author(id)
  FOREIGN KEY (label_id)  REFERENCES Label(id)
);

CREATE TABLE MusicAlbum(
    id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    genre_id      INT,
    author_id     INT,
    label_id      INT,
    publish_date  DATE,
    archived      BOOLEAN,
    on_spotify VARCHAR(50),
    name VARCHAR(50),
    FOREIGN KEY(genre_id)  REFERENCES Genre(id),
    FOREIGN KEY(author_id) REFERENCES Author(id),
    FOREIGN KEY(label_id)  REFERENCES Label(id)
);
